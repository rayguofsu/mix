   第一轮：定义buddy system为一棵complete binary tree。一个node可能为0也可能为1

. 它的

value为1，当且仅当它所有的child的value均为1.

1

|             

1          2

|          |     

1 2    3 4

| |   | |

1 2  3 4 5 6  7 8

实现下列的method。

1' clearBit(int offset, int len);

2' setBit(int offset, int len);

Q: offset 和 len都是指最下面一层的，对吗？

A: yes

Q: 用二维数组bits[level][number]存储是他们给出的吗？

A: yes
==============from on line solution; 要求操作非常效率，主要考虑读取连续的内存进入memory，这样会使cache的命中率增加===========
   public static void clearBit(int[][] matrix, int offset, int length) { 
    int curLevel = matrix.length-1; 
    int left = offset; 
    int right = offset+length - 1; 
    while (curLevel >= 0){ 
      for (int i = left; i <= right; i++) { 
        matrix[curLevel][i] = 0;
      }
      curLevel--; 
      left = left/2; 
      right = right/2; 
    } 
  }
  
  public static void setBit(int[][] bits, int offset, int length) {
     int curLevel = bits.length-1; 
     int left = offset;
     int right = offset+length - 1; 
     while (curLevel >= 0) { 
        for (int i = left; i <= right; i++) {
                      bits[curLevel][i] = 1;
        }
        if (curLevel == 0) return;
        int leftBuddy = left + (left % 2 == 1 ? -1 : 1);
        int rightBuddy = right + (right % 2 == 1 ? -1 : 1);
           // System.out.println(curLevel + " " + left + " " + leftBuddy);
        int leftBit = bits[curLevel][left] * bits[curLevel][leftBuddy];
        int rightBit = bits[curLevel][right] * bits[curLevel][rightBuddy];
        curLevel--; 
        left /= 2; 
        right /= 2; 
        if (leftBit == 0) { 
          left++; 
        } 
        if (rightBit == 0) { 
          right--; 
        } 
      //} 
   }
  }
}



===================================================================================================
class Solution {

  public static void main(String[] args) {
    int[][] arr = new int[][]{{0}, {0, 1}, {1, 0, 1, 1}, {1, 1, 0, 1, 1, 1, 1, 1}};
    for (int[] a: arr){
      System.out.println(Arrays.toString(a));
    }
    int offset = 1;
    int len = 4;
    clearBit(arr, offset, len);
    System.out.println();
    for (int[] a: arr){
      System.out.println(Arrays.toString(a));
    }
    System.out.println();
    setBit(arr, 3, 2);
    for (int[] a: arr){
      System.out.println(Arrays.toString(a));
    }
  }
  
  private static void clearBit(int[][] arr, int offset, int len){
    int lastRow = arr.length - 1;
    int end = Math.min(offset + len - 1, arr[lastRow].length - 1);
    for (int i = offset; i <= end; i++){
      if (arr[lastRow][i] == 0) continue;
      arr[lastRow][i] = 0;
      int upperRow = lastRow - 1;
      int j = i;
      while(upperRow >= 0 && arr[upperRow][j / 2] == 1){
        j /= 2;
        arr[upperRow][j] = 0;
        upperRow--;
      }
    }
  }
  
  private static void setBit(int[][] arr, int offset, int len){
    int lastRow = arr.length - 1;
    int end = Math.min(offset + len - 1, arr[lastRow].length - 1);
    for (int i = offset; i <= end; i++){
      if (arr[lastRow][i] == 1) continue;
      arr[lastRow][i] = 1;
      int cur = lastRow;
      int j = i;
      while(cur > 0 ){
        //odd
        if (j % 2 == 1 && arr[cur][j - 1] == 1){
          arr[cur - 1][j / 2] = 1;
        }
        //even
        else if (j % 2 == 0 && arr[cur][j + 1] == 1){
          arr[cur - 1][j / 2] = 1;
        }
        else{
         // System.out.println("here");
          break;
        }
        j /= 2;
        cur--;
      }
  }
 }
