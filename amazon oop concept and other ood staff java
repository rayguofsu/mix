Abstraction
Polymorphism
Inheritance
Encapsulation


Polymorphism could be static and dynamic both. Overloading is static polymorphism (也叫COMPILE TIME POL，因为PARA TYPE不同）while, overriding is dynamic polymorphism （也叫RUN TIME POLY, 因为COMPILER不知道那个METHOD 去CALL，只等到RUN TIME 时候才知道）.

    Overloading in simple words means two methods having same method name but takes different input parameters. This called static because, which method to be invoked will be decided at the time of compilation
    Overriding means a derived class is implementing a method of its super class.


class Overload
{
    void demo (int a)
    {
       System.out.println ("a: " + a);
    }
    void demo (int a, int b)
    {
       System.out.println ("a and b: " + a + "," + b);
    }
    double demo(double a) {
       System.out.println("double a: " + a);
       return a*a;
    }
}
class MethodOverloading
{
    public static void main (String args [])
    {
        Overload Obj = new Overload();
        double result;
        Obj .demo(10);
        Obj .demo(10, 20);
        result = Obj .demo(5.5);
        System.out.println("O/P : " + result);
    }
}

============overriding==============

class Vehicle {
    public void move () {
         System.out.println ("Vehicles are used for moving from one place to another ");
    }
}

class Car extends Vehicle {//override
    public void move () {
      super. move (); // invokes the super class (or parent class) method
      System.out.println ("Car is a good medium of transport ");
    }
}

class Motorbike extends Vehicle{ //override
 public void move(){

      System.out.pritnln("i am a bike");

  }

} 


======================inheritance=============

The derived class is also called subclass and the base class is also 
known as super-class. The derived class can add its own additional 
variables and methods. These additional variable and methods 
differentiates the derived class from the base class.

Inheritance is a compile-time mechanism. A super-class can have any number of subclasses. But a subclass can have only one superclass. This is because Java does not support multiple inheritance.

The superclass and subclass have “is-a” relationship between them. Let’s have a look at the example below.

VEHICLE->CAR->SPORT CAR（这个继承上面两层的所以FEATURE/VARIABLE，除非PRVATE）The derived class inherits all the members and methods that are declared as public or protected. If declared as private it can not be inherited by the derived classes.

class Rectangle extends Shape {
   private String type;

   // default Constructor
   Rectangle() {
      super();   //这个是在CALL SUPER CLASS的CONSTRUCTOR 在这里。可以有带PAR的， 如果 SUPER(5)
      type = null;
      System.out.println("Inside default constructor of rectangle ");
   }


By using super we can access the overridden method in the super class.
   void showattributes() {
      // showattributes() of class Shape is called
      super.showattributes(); //super 的呗OVERRIDDEN了，但还可以ACCESS
      System.out.println("type : " + type);
   }



Using Final with methods: We can prevent a method from being overridden by using the keyword final at the start of its

public abstract void methodname();
class Shape {
   final void showattributes() {
      System.out.println("Inside class shape ");
   }
}


Uing Final with class: We can also prevent inheritance 
by making a class final. When a class is declared as final, its methods 
also become final. An abstract class cannot be declared as final because
 an abstract class is incomplete and its subclasses need to provide the 
implementation.

===================encapsulation=========

Advantages of encapsulation:  (就是用PRIVATE 来HIDE DATA，只被这个CLASS CALL， 外界要通过PUBLIC METHOD来得到这些HIDEN DATA的FEATURE）
It improves maintainability and flexibility and re-usability: for e.g. In the above code the implementation code of void setEmpName(String name) and String getEmpName() can be changed at any point of time.

public class EncapsulationDemo{
    private int ssn;  
    private String empName;
    private int empAge;

    //Getter and Setter methods
    public int getEmpSSN(){
        return ssn;
    }

    public String getEmpName(){
        return empName;
    }

    public int getEmpAge(){
        return empAge;
    }

    public void setEmpAge(int newValue){
        empAge = newValue;
    }

    public void setEmpName(String newValue){
        empName = newValue;
    }

    public void setEmpSSN(int newValue){
        ssn = newValue;
    }
    
    ===========================================
    poly:

        BaseClass obj1 = new BaseClass(); 
        // BaseClass reference but DerivedClass object
        BaseClass obj2 = new DerivedClass(); 
        // Calls the method from BaseClass class
        obj1.methodToOverride(); 
        //Calls the method from DerivedClass class
        obj2.methodToOverride(); 
        ===========================================
   其实就是"has-a" and "is-a" 的设计，也就是用inheritance或是composition
。根据直觉定了了如下的UML图


===================================
https://www.careercup.com/page?pid=amazon-interview-questions&topic=object-oriented-design-interview-questions
http://wdxtub.com/interview/14520604447653.html
https://www.glassdoor.com/Interview/Amazon-San-Francisco-Interview-Questions-EI_IE6036.0,6_IL.7,20_IM759_IP3.htm?filter.jobTitleFTS=software

:(. Prepare on arrays, strings, trees and don't forget graph. Also dynamic programming will be helpful. Hash data structure is important and keep it in mind always while solving problems. Also its very important to read AWS interview blogs, glass door, career cup etc. and solve the problems posted there. If you are not currently interviewing I will suggest you to prepare for 4 weeks (prepare with writing code on paper) before the interview.
4) Amazon do concentrate on leadership principles and ask many questions related to behavior etc. So prepare it very well. These questions like 'why amazon' are important and can be phrased into multiple ways.
5) Design questions: Ask questions while solving to clarify and keep on building the system … do some practice at home. I will suggest to first concentrate on computer science questions like OS, file system design and then work on more generic like design coffee shop etc.
================================
Design a deck of cards that can be used for different card game applications.

Please code out what you would need for the deck class and a card class.

Implement a deal method.

CardShape.java

package com.ankitgupta;

/**
 * Created by ankitgupta on 9/9/16.
 */
public enum CardShape {
	SPADE,
	DIAMOND,
	CLUB,
	HEART;
}

CardNumber.java

package com.ankitgupta;

/**
 * Created by ankitgupta on 9/9/16.
 */
public enum CardNumber {
	ACE,
	TWO,
	THREE,
	FOUR,
	FIVE,
	SIX,
	SEVEN,
	EIGHT,
	NINE,
	TEN,
	JACK,
	QUEEN,
	KING;
}

Card.java
package com.ankitgupta;

/**
 * Created by ankitgupta on 9/9/16.
 */
public class Card {

	CardShape shape;
	CardNumber number;

	Card(CardShape shape,CardNumber number){
		this.shape = shape;
		this.number = number;
	}

	public CardNumber getNumber() {
		return number;
	}

	public CardShape getShape() {
		return shape;
	}

	public String getName(){
		return number + " of " + shape;
	}
}

Deck.java

package com.ankitgupta;

import java.util.Random;
import java.util.Stack;

/**
 * Created by ankitgupta on 9/9/16.
 */
public class Deck {

	public static Stack<Card> getNewSortedDeck(){
		Stack<Card> cardDeck = new Stack<Card>();
		for (CardShape shape: CardShape.values()){
			for (CardNumber number: CardNumber.values()){
				Card card = new Card(shape,number);
				cardDeck.push(card);
			}
		}
		return cardDeck;
	}

	public static Stack<Card> getShuffeledDeck(){
		return getShuffeledDeck(getNewSortedDeck());
	}

	public static Stack<Card> getShuffeledDeck(Stack<Card> deck){
		Stack<Card> cardDeck = new Stack<Card>();
		int count = 0;
		for (int i=deck.size();i>;0;i--){
			Random random = new Random();
			Card randomCard = deck.remove(random.nextInt(i));
			cardDeck.push(randomCard);
		}
		return cardDeck;
	}

	public static void printDeck(Stack<Card> deck){
		for (int i=0 ; i<deck.size();i++) {
			System.out.println("Adding Random Card No. " + (i+1) + " to the Deck : " + deck.get(i).getName());
		}
	}
}

Player.java

package com.ankitgupta;

import java.util.Stack;

/**
 * Created by ankitgupta on 9/9/16.
 */
public class Player {

	private String name;
	private Stack<Card> cards;

	Player (String name){
		this.name = name;
		this.cards = new Stack<Card>();
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public Stack<Card> getCards() {
		return cards;
	}

	public void setCards(Stack<Card> cards) {
		this.cards = cards;
	}

	public void addCard(Card card){
		this.cards.push(card);
	}
	
	public void removeCard(Card card){
		this.cards.remove(card);
	}

}


CardGame.java
package com.ankitgupta;

import java.security.PublicKey;
import java.util.Stack;

/**
 * Created by ankitgupta on 9/9/16.
 */
public class CardGame {
	private Player[] players;
	private int cardsPerPlayer;
	Stack<Card> stackOfCards = Deck.getShuffeledDeck();
	CardGame(Player[] players){
		this.players = players;
		this.cardsPerPlayer=0;
	}

	CardGame(Player[] players, int cardsPerPlayer){
		this.players = players;
		this.cardsPerPlayer = cardsPerPlayer;
	}

	public void dealCards(){
		int playerCount = players.length;
		if (playerCount>;0){
			int cardsToDeal = cardsPerPlayer==0? stackOfCards.size() :cardsPerPlayer*playerCount;
			for (int i=0;i<cardsToDeal;i++){
				players[i%playerCount].addCard(stackOfCards.pop());
			}
		}
	}
	public Stack<Card> getStackOfCards(){
		return stackOfCards;
	}
}


Deal.java

package com.ankitgupta;

import java.util.Stack;

/**
 * Created by ankitgupta on 9/9/16.
 */
public class Deal {

	public static void main(String[] args) {

		Player player1 = new Player("Player1");
		Player player2 = new Player("Player2");
		Player player3 = new Player("Player3");
		Player player4 = new Player("Player4");

		Player[] players = {player1,player2,player3,player4};
		CardGame game = new CardGame(players);
		game.dealCards();

		System.out.println("Player 1 Cards : ");
		Deck.printDeck(player1.getCards());

		System.out.println("Player 2 Cards : ");
		Deck.printDeck(player2.getCards());

		System.out.println("Player 3 Cards : ");
		Deck.printDeck(player3.getCards());

		System.out.println("Player 4 Cards : ");
		Deck.printDeck(player4.getCards());

		System.out.println("Remaining Cards : ");
		Deck.printDeck(game.getStackOfCards());

	}
}
======================
Model a restaurant reservation system, where staff can make a reservation, pull up, cancel reservations. The reservation system is very simple local to just one terminal at the restaurant not connected to network.

Class ReservationSystem{
	HashTable <Long,Reservation> reservationTable = new HashTable<>();
	//from others copied over:
	List<Table> avilableTables=new List<Table>();
	List<Table> occupiedTables=new List<Table>();
  
       public void createReservation(long startTime,String firstName, String LastName,int partySize){
	  Random random = new Random();
	  long reservationID = random.getNextLong(10000);
	  Person reserver = new Person();
	  reserver.firstName = firstName;
	  reserver.lastName = lastName;
	  reservationTable.put(reservationID, new Reservation(reservationId,startTime,reserver,partySize);
	}
	public Reservation searchReservation(){}
	public void cancelReservation(){}
}

class Table//from others
{
	int size, type;
}

 Class Reservation{
	long reservationID;
	long startTime;
	Person reserver;
	int partySize;
	public Reservation( long reservationID, long startTime, Person reserver, int partySize){
	this.startTime = startTime;
	this.reserver = reserver;
	this.partySize = partySize;
	}
	
}

Class Person
{
	String firstName;
	String lastName;
	String phoneNumber;
	String email;
}

...
======================
https://www.javacodegeeks.com/2013/03/difference-between-comparator-and-comparable-in-java.html
https://www.tutorialspoint.com/spring/spring_dependency_injection.htm

Comparator interface: Class whose objects to be sorted do not need to implement this interface.Some third class can implement this interface to sort.e.g.CountrySortByIdComparator class can implement Comparator interface to sort collection of country object by id. For example:
