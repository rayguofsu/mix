计一个Map<Integer, Integer>，满足下面的时间复杂度。
add: O(1)  deletion: O(1)  lookup: O(1)  clear:O(1)  iterate: O(number of
elements)。
提示：
如果我们用randomly accessed array，复杂度如下：
add: O(1)  deletion: O(1)  lookup: O(1)  clear: O(size of array)   iterate:
O(size of array)
如果我么用sequential array, 复杂度如下：
add: O(1)  deletion: O(number of elements)  lookup:O(number of elements)  
clear: O(1) iterate:O(number of elements)
所以我们需要把这两个方法整合起来。




import java.io.*;
import java.util.*;

/*
 * To execute Java, please define "static void main" on a class
 * named Solution.
 *
 * If you need more classes, simply define them inline.
 */

class Solution {
  public static class Element{
    int key, val, phaseNo;
    Element next, prev;
    public Element(int key, int val, int phaseNo){
      this.key = key;
      this.val = val;
      this.phaseNo = phaseNo;
    }
  }
  
  public static class MapO1{
    private Element[] bucket;
    private int cur_phase_no = 0;
    private int capacity;
    private Element head, tail;
    public MapO1(int capacity) {
       this.capacity = capacity;
       this.bucket = new Element[capacity];
       this.head = new Element(0, 0, -1);
       this.tail = new Element(0, 0, -1);
       this.head.next = this.tail;
       this.tail.prev = this.head;
       
    }
    
    public void add(int key, int val) {
        int index = getIndex(key);
        Element e = bucket[index];
        if (e == null || e.phaseNo != cur_phase_no){
           bucket[index] = new Element(key, val, cur_phase_no);
           bucket[index].prev = tail.prev;
           tail.prev.next = bucket[index];
           bucket[index].next = tail;
           tail.prev = bucket[index];
           
        }
        else{
           bucket[index].val = val;
        }
    }
        
    public boolean lookUp(int key){
       int index = getIndex(key);
       Element e = bucket[index];
       if (e == null || e.phaseNo != cur_phase_no){
          return false;
       }
       return true;
    }
    
    public void delete(int key) {
        int removedIndex = getIndex(key);
        if (bucket[removedIndex] == null || bucket[removedIndex].phaseNo != cur_phase_no) return;
        bucket[removedIndex].phaseNo = -1;
        bucket[removedIndex].prev.next = bucket[removedIndex].next;
        bucket[removedIndex].next.prev = bucket[removedIndex].prev;
    }    
    
    public void clear(){
       cur_phase_no ^= 1;
       this.head.next = this.tail;
       this.tail.prev = this.head;
    }
    
    public Iterator<Element> getIterator(){
       Iterator<Element> it = new Iterator<Element>(){
          Element travel = head.next;
          @Override
          public boolean hasNext(){
            //System.out.println("here is " + travel.key + " phase " + travel.phaseNo);
            return travel.phaseNo != -1;
          }
      
          @Override
          public Element next(){
            Element next = travel;
            travel = travel.next;
            return next;
          }
      };
      return it;
    }
    
    public int getIndex(int key){
      //integer hashCode is just Integer; just return Math.abs(key % capacity) should be fine too
      return Math.abs(((Integer) key).hashCode()) % capacity;
    
    }
  }
  
  
  public static void printPair(Iterator<Element> it){
      while(it.hasNext()){
          System.out.println("i am here");
          Element p = it.next();
          System.out.println(p.key + " " + p.val + " " + p.phaseNo);
      }
  
  }

  public static void main(String[] args) {
      //o1 map;
      MapO1 map = new MapO1(5);
      map.add(1, 2);
      map.add(2, 3);
      map.add(3, 5);
      map.add(5, 9);
      Iterator<Element> it = map.getIterator();
      printPair(it);
      System.out.println(map.lookUp(2));
      map.delete(2);
      System.out.println(map.lookUp(2));
      printPair(map.getIterator());
      map.clear();
      System.out.print("clear");
      map.add(3, 5);
      map.add(5, 9);
      printPair(map.getIterator());
  }
  
}


