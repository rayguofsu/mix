draw a cricle:
  public static class Point{
    int x, y;
    Point(int x, int y){
       this.x = x;
       this.y = y;
    }
    @Override
    public boolean equals(Object o){
       if (o instanceof Point){
          Point p = (Point) o;
          return p.x == x && p.y == y;
       }
       return false;
    }
    @Override
    public int hashCode(){
       int res = 17;
       res = 31 * res + x;
       res = 31 * res + y;
       return res;
    }
  }
  public static void main(String[] args) {
    int r = 100;
    int x = r;
    int y = 0;
    Set<Point> points = new HashSet<>();
    while(x >= r * 0.717 && y <= r * 0.717){
      int dis = x * x + y * y;
      if (dis == r * r){
         points.add(new Point(x, y));
         x--;
         y++;
      }
      else if (dis < r * r){
         y++;
      }
      else{
         x--;
      }
    }
    Set<Point> res = new HashSet<>();
    //can use hashset to avoid duplicates here; like 0 = p[0]; -p[0] gives the same 0
    for (Point p : points){
        res.add(p);
        res.add(new Point(-p.x, p.y));
        res.add(new Point(p.x, -p.y));
        res.add(new Point(-p.x, -p.y));

        res.add(new Point(p.y, p.x));
        res.add(new Point(-p.y, p.x));
        res.add(new Point(p.y, -p.x));
        res.add(new Point(-p.y, -p.x));

    }
    for (Point a: res){   
      System.out.println(a.x + " " + a.y);
    }
  }
  =====================================================================================
class Solution {
  public static class Point{
      int x, y;
      Point(int x, int y){
          this.x = x;
          this.y = y;
      }
      @Override
      public boolean equals(Object o){
          if (o instanceof Point){
              Point p = (Point) o;
              return p.x == x && p.y == y;
          }
          return false;
      }
      @Override
      public int hashCode(){
          int hash = 17;
          hash = 31 * hash + x;
          hash = 31 * hash + y;
          return hash;
      }
  }
  public static void main(String[] args) {
    int r = 100;
    Set<Point> points = drawCircle(r);
    for(Point p : points){
      System.out.println(p.x + " " + p.y);
    }
  }
  public static Set<Point> drawCircle(int r){
      int x = r, y = 0;
      Set<Point> points = new HashSet<>();
      int dis = r * r;
      while(x >= 0.717 * r){
          y = binarySearch(dis, x, 0);
          if (y >= 0){
            points.add(new Point(x, y));
            points.add(new Point(-x, y));
            points.add(new Point(-x, -y));
            points.add(new Point(x, -y));
            
            points.add(new Point(y, x));
            points.add(new Point(-y, x));
            points.add(new Point(-y, -x));
            points.add(new Point(y, -x));
          }
          x--;
      }
      return points;
  }
  public static int binarySearch(int dis, int hi, int lo){
      int x = hi;
      while(lo <= hi){
          int mid = lo + (hi - lo) / 2;
          int distance = x * x + mid * mid;
          if (distance == dis) return mid;
          if (distance > dis) hi = mid - 1;
          else lo = mid + 1;
      }
      return -1;
  }
  }
