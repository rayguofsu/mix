  

Count the number of possible palindrome substrings in a string. A palindrome is a word that reads the same way spelled backwards.
Example:
input: lasagna.
Possible palindromes are asa, l,a,s,a,g,n,a.
output: count is 8.

input:hellolle
ellolle,lloll,lol,ll,ll,h,e,l,l,o,l,l,e.
output:13.

  public static void main(String[] args) {
    String s = "hellolle";
    System.out.println(countPalindrom(s));
    
  }
  public static int countPalindrom(String s){
    if (s == null || s.length() == 0) return 0;
    int res = 0;
    for (int i = 0; i < s.length(); i++){
      int index = helper(s, i - 1, i + 1);
      res += index - i + 1;//remember
      if (i + 1 < s.length() && s.charAt(i) == s.charAt(i + 1)){
        index = helper(s, i - 1, i + 2);
        res += index - i; //remember
      }
    }
    return res;
  }
  private static int helper(String s, int lo, int hi){
    while(lo >= 0 && hi < s.length()){
      if (s.charAt(lo) == s.charAt(hi)){
        lo--; hi++;
      }
      else break;
    }
    return hi - 1;
  }
  
  ///////////////////
  
draw a cricle:
  public static class Point{
    int x, y;
    Point(int x, int y){
       this.x = x;
       this.y = y;
    }
    @Override
    public boolean equals(Object o){
       if (o instanceof Point){
          Point p = (Point) o;
          return p.x == x && p.y == y;
       }
       return false;
    }
    @Override
    public int hashCode(){
       int res = 17;
       res = 31 * res + x;
       res = 31 * res + y;
       return res;
    }
  }
  public static void main(String[] args) {
    int r = 100;
    int x = r;
    int y = 0;
    Set<Point> points = new HashSet<>();
    while(x >= (int) (r * 0.717) && y <= (int) (r * 0.717)){
      int dis = x * x + y * y;
      if (dis == r * r){
         points.add(new Point(x, y));
         x--;
         y++;
      }
      else if (dis < r * r){
         y++;
      }
      else{
         x--;
      }
    }
    Set<Point> res = new HashSet<>();
    //can use hashset to avoid duplicates here; like 0 = p[0]; -p[0] gives the same 0
    for (Point p : points){
        res.add(p);
        res.add(new Point(-p.x, p.y));
        res.add(new Point(p.x, -p.y));
        res.add(new Point(-p.x, -p.y));

        res.add(new Point(p.y, p.x));
        res.add(new Point(-p.y, p.x));
        res.add(new Point(p.y, -p.x));
        res.add(new Point(-p.y, -p.x));

    }
    for (Point a: res){   
      System.out.println(a.x + " " + a.y);
    }
  }
  
  Draw a circle:
  Using BS:
    public static class Point{
    int x, y;
    Point(int x, int y){
       this.x = x;
       this.y = y;
    }
    @Override
    public boolean equals(Object o){
       if (o instanceof Point){
          Point p = (Point) o;
          return p.x == x && p.y == y;
       }
       return false;
    }
    @Override
    public int hashCode(){
       int res = 17;
       res = 31 * res + x;
       res = 31 * res + y;
       return res;
    }
  }
  public static void main(String[] args) {
    int r = 100;
    int x = r;
    int y = 0;
    Set<Point> points = new HashSet<>();
    while(x >= (int) (r * 0.717)){
      y = binarySearch(r, x, 0);
      if (y >= 0){
         points.add(new Point(x, y));
         points.add(new Point(-x, y));
         points.add(new Point(x, -y));
         points.add(new Point(-x, -y));
         points.add(new Point(y, x));
         points.add(new Point(-y, x));
         points.add(new Point(y, -x));
         points.add(new Point(-y, -x));
      }
      x--;
    }
    for (Point a: points){   
      System.out.println(a.x + " " + a.y);
    }
  }
  private static int binarySearch(int r, int hi, int lo){
     int x = hi;
     int res = -1;
     while(lo <= hi){
        int mid = lo + (hi - lo) / 2;
        int dist = x * x + mid * mid;
        if (dist < r * r) lo = mid + 1;
        else if (dist > r * r) hi = mid - 1;
        else{
          res = mid;break;
        }
     
     }
     return res;
  }
   ////////////bUDDY SYSTEM///
   第一轮：定义buddy system为一棵complete binary tree。一个node可能为0也可能为1

. 它的

value为1，当且仅当它所有的child的value均为1.

1

|             

1          2

|          |     

1 2    3 4

| |   | |

1 2  3 4 5 6  7 8

实现下列的method。

1' clearBit(int offset, int len);

2' setBit(int offset, int len);

Q: offset 和 len都是指最下面一层的，对吗？

A: yes

Q: 用二维数组bits[level][number]存储是他们给出的吗？

A: yes
class Solution {

  public static void main(String[] args) {
    int[][] arr = new int[][]{{1}, {0, 1}, {1, 0, 1, 1}, {1, 1, 0, 1, 1, 1, 1, 1}};
    for (int[] a: arr){
      System.out.println(Arrays.toString(a));
    }
    int offset = 1;
    int len = 4;
    clearBit(arr, offset, len);
    System.out.println();
    for (int[] a: arr){
      System.out.println(Arrays.toString(a));
    }
    System.out.println();
    setBit(arr, 3, 2);
    for (int[] a: arr){
      System.out.println(Arrays.toString(a));
    }
  }
  
  private static void clearBit(int[][] arr, int offset, int len){
    int lastRow = arr.length - 1;
    int end = Math.min(offset + len - 1, arr[lastRow].length - 1);
    for (int i = offset; i <= end; i++){
      if (arr[lastRow][i] == 0) continue;
      arr[lastRow][i] = 0;
      int upperRow = lastRow - 1;
      int j = i;
      while(upperRow >= 0){
        j /= 2;
        arr[upperRow][j] = 0;
        upperRow--;
      }
    }
  }
  
  private static void setBit(int[][] arr, int offset, int len){
    int lastRow = arr.length - 1;
    int end = Math.min(offset + len - 1, arr[lastRow].length - 1);
    for (int i = offset; i <= end; i++){
      if (arr[lastRow][i] == 1) continue;
      arr[lastRow][i] = 1;
      int cur = lastRow;
      int j = i;
      while(cur > 0){
        //odd
        if (j % 2 == 1 && arr[cur][j - 1] == 1){
          arr[cur - 1][j / 2] = 1;
        }
        //even
        else if (j % 2 == 0 && arr[cur][j + 1] == 1){
          arr[cur - 1][j / 2] = 1;
        }
        else{
         // System.out.println("here");
          break;
        }
        j /= 2;
        cur--;
      }
  }
 }

}


